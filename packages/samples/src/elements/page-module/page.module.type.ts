/**
 * Do not modify this file, it is auto-generated.
 */
/* tslint:disable:max-line-length */
import { PageContributionType, isPageContributionType as vdn6Mld$G } from './../page-contribution/page.contribution.type';
import { DeliveryGroupElementMetadata, Image } from '@acoustic-content-sdk/api';
import { EqualsPredicate, isImage as rRk_SZ4NH, isNotNil as Lrzcbu8aG, isOptional as PEdHKHuzA, isOptionalArrayOf as logwFItzm, isString as LqeJjI1YD, partialLeft, pluckProperty, rxSelectProperty } from '@acoustic-content-sdk/utils';
import { OperatorFunction, UnaryFunction } from 'rxjs';

export const TYPE_ID = 'aab86460-0018-44c2-9f52-3a326e58f7f7';
export const TYPE_NAME = 'ðŸ“„ Page Module';
export const KEY_PAGE_MODULE_ELEMENT_HEAD = 'head';
export const KEY_PAGE_MODULE_ELEMENT_BODY = 'body';
export const KEY_PAGE_MODULE_ELEMENT_KEY = 'key';
export const KEY_PAGE_MODULE_ELEMENT_PREVIEW = 'preview';

/*
 * @name ðŸ“„ Page Module
 * @id aab86460-0018-44c2-9f52-3a326e58f7f7
 * @description The list of related page contribution content items for the head and body elements of the pages of a given site. Content items of this type may be generated by a build step generating unique IDs for the given item. Markup contributions are added to the markup of every individual page. Page modules can contribute to both, the "head" and the "body" element of the page. Future version may support overriding page modules for specific pages.
 */
export interface PageModuleType {
    /**
     * Metadata reference
     */
    $metadata: DeliveryGroupElementMetadata;

    /**
     * @example
     * ```json
     * {
     *   "allowMultipleValues": true,
     *   "elementType": "group",
     *   "fieldLabel": "Custom Element",
     *   "helpText": "Reference a shared page contribution to be included in the \"head\" section of the page.",
     *   "key": "head",
     *   "label": "head",
     *   "minimumValues": 0,
     *   "role": [
     *     "configuration"
     *   ],
     *   "typeRef": {
     *     "id": "354743b2-f89a-482b-b447-2b5a2367c8bd"
     *   }
     * }
     * ```
     */
    [KEY_PAGE_MODULE_ELEMENT_HEAD]?: PageContributionType[];

    /**
     * @example
     * ```json
     * {
     *   "allowMultipleValues": true,
     *   "elementType": "group",
     *   "fieldLabel": "Custom Element",
     *   "helpText": "Reference a shared page contribution to be included in the \"body\" section of the page.",
     *   "key": "body",
     *   "label": "body",
     *   "minimumValues": 0,
     *   "role": [
     *     "configuration"
     *   ],
     *   "typeRef": {
     *     "id": "354743b2-f89a-482b-b447-2b5a2367c8bd"
     *   }
     * }
     * ```
     */
    [KEY_PAGE_MODULE_ELEMENT_BODY]?: PageContributionType[];

    /**
     * @example
     * ```json
     * {
     *   "elementType": "text",
     *   "helpText": "This element is used to uniquely identify this element in the current content item",
     *   "key": "key",
     *   "label": "Key"
     * }
     * ```
     */
    [KEY_PAGE_MODULE_ELEMENT_KEY]?: string;

    /**
     * @example
     * ```json
     * {
     *   "elementType": "image",
     *   "helpText": "Preview image for this item to be displayed in the authoring UI",
     *   "key": "preview",
     *   "label": "preview",
     *   "role": [
     *     "configuration"
     *   ]
     * }
     * ```
     */
    [KEY_PAGE_MODULE_ELEMENT_PREVIEW]?: Image;
}

/**
 * Tests if the value is of type PageModuleElement
 *
 * @param aValue - the value to test
 * @returns true if the value is of type PageModuleElement else false
 */
export function isPageModuleType(aValue: any): aValue is PageModuleType {
    return Lrzcbu8aG(aValue)
        && logwFItzm(aValue[KEY_PAGE_MODULE_ELEMENT_HEAD], vdn6Mld$G)
        && logwFItzm(aValue[KEY_PAGE_MODULE_ELEMENT_BODY], vdn6Mld$G)
        && PEdHKHuzA(aValue[KEY_PAGE_MODULE_ELEMENT_KEY], LqeJjI1YD)
        && PEdHKHuzA(aValue[KEY_PAGE_MODULE_ELEMENT_PREVIEW], rRk_SZ4NH)
    ;
}

/**
 * Selects the "head" property from PageModuleType.
 *
 * @param aDefault - optional default
 *
 * @returns the selector function
 */
export const selectHead: (aDefault?: PageContributionType[]) => UnaryFunction<PageModuleType, PageContributionType[]> = partialLeft(pluckProperty, KEY_PAGE_MODULE_ELEMENT_HEAD);

/**
 * Selects the "head" property from PageModuleType as an operator.
 *
 * @param aDefault - optional default
 * @param aCmp - optional comparator to compare the results
 *
 * @returns the selector operator
 */
export const rxSelectHead: (aDefault?: PageContributionType[], aCmp?: EqualsPredicate<PageContributionType[]>) => OperatorFunction<PageModuleType, PageContributionType[]> = partialLeft(rxSelectProperty, KEY_PAGE_MODULE_ELEMENT_HEAD);

/**
 * Selects the "body" property from PageModuleType.
 *
 * @param aDefault - optional default
 *
 * @returns the selector function
 */
export const selectBody: (aDefault?: PageContributionType[]) => UnaryFunction<PageModuleType, PageContributionType[]> = partialLeft(pluckProperty, KEY_PAGE_MODULE_ELEMENT_BODY);

/**
 * Selects the "body" property from PageModuleType as an operator.
 *
 * @param aDefault - optional default
 * @param aCmp - optional comparator to compare the results
 *
 * @returns the selector operator
 */
export const rxSelectBody: (aDefault?: PageContributionType[], aCmp?: EqualsPredicate<PageContributionType[]>) => OperatorFunction<PageModuleType, PageContributionType[]> = partialLeft(rxSelectProperty, KEY_PAGE_MODULE_ELEMENT_BODY);

/**
 * Selects the "key" property from PageModuleType.
 *
 * @param aDefault - optional default
 *
 * @returns the selector function
 */
export const selectKey: (aDefault?: string) => UnaryFunction<PageModuleType, string> = partialLeft(pluckProperty, KEY_PAGE_MODULE_ELEMENT_KEY);

/**
 * Selects the "key" property from PageModuleType as an operator.
 *
 * @param aDefault - optional default
 * @param aCmp - optional comparator to compare the results
 *
 * @returns the selector operator
 */
export const rxSelectKey: (aDefault?: string, aCmp?: EqualsPredicate<string>) => OperatorFunction<PageModuleType, string> = partialLeft(rxSelectProperty, KEY_PAGE_MODULE_ELEMENT_KEY);

/**
 * Selects the "preview" property from PageModuleType.
 *
 * @param aDefault - optional default
 *
 * @returns the selector function
 */
export const selectPreview: (aDefault?: Image) => UnaryFunction<PageModuleType, Image> = partialLeft(pluckProperty, KEY_PAGE_MODULE_ELEMENT_PREVIEW);

/**
 * Selects the "preview" property from PageModuleType as an operator.
 *
 * @param aDefault - optional default
 * @param aCmp - optional comparator to compare the results
 *
 * @returns the selector operator
 */
export const rxSelectPreview: (aDefault?: Image, aCmp?: EqualsPredicate<Image>) => OperatorFunction<PageModuleType, Image> = partialLeft(rxSelectProperty, KEY_PAGE_MODULE_ELEMENT_PREVIEW);
