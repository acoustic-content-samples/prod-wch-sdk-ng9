/**
 * Do not modify this file, it is auto-generated.
 */
/* tslint:disable:max-line-length */
{{#each otherImports}}
import { {{#each this}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}} } from '{{{@key}}}';
{{/each}}

/**
 * Identifier of the content type for {@link {{{definitionName}~}} }.
 */
export const TYPE_ID_{{{jsEscape constantPrefix}}} = '{{{jsEscape id}}}';
/**
 * Name of the content type for {@link {{{definitionName}~}} }.
 */
export const TYPE_NAME_{{{jsEscape constantPrefix}}} = '{{{jsEscape name}}}';
{{#each bindings}}
/**
 * Key name of the `{{{jsEscape this.key}}}` property of {@link {{{../definitionName}~}} }
 */
export const {{{ this.constant }}} = '{{{jsEscape this.key}}}';
{{/each}}

/**
 * Delivery version of the {{{jsEscape name}}} content type.
 *
 * See {@link TYPE_ID_{{{jsEscape constantPrefix}~}} } and {@link TYPE_NAME_{{{jsEscape constantPrefix}~}} }
{{#if description}}
 * @remarks
 * {{{description}}}
{{/if}}
{{#if creator}}
 * @author {{{creator}}}
{{/if}}
 */
export interface {{{definitionName}}} {
  /**
   * Metadata reference
   */
   $metadata: DeliveryGroupElementMetadata;
{{#each bindings}}

  /**
{{#if helpText}}
   * {{{helpText}}}
{{/if}}
   * @remarks
   * See {@link {{{this.constant}~}} }
   *
   * @example
   * Original type definition in the content type:
   * ```json
{{{this.comment}}}
   * ```
   */
  [{{{jsEscape this.constant}}}]{{#if this.optional}}?{{/if}}: {{{this.type}}};
  {{/each}}
}

/**
 * Tests if the value is of type {@link {{{definitionName}~}} }
 *
 * @param aValue - the value to test
 * @returns true if the value is of type {@link {{{definitionName}~}} } else false
 */
export function is{{{definitionName}}}(aValue: any): aValue is {{{definitionName}}} {
{{#if hasBindings}}
  return {{{isNotNil}}}(aValue)
{{#each bindings}}
{{#if this.validator}}
{{#if this.required}}
{{#if this.multi}}
    && {{{../isArrayOf}}}(aValue[{{{jsEscape this.constant}}}], {{{ this.validator }}})
{{else}}
    && {{{ this.validator }}}(aValue[{{{jsEscape this.constant}}}])
{{/if}}
{{else}}
{{#if this.multi}}
    && {{{../isOptionalArrayOf}}}(aValue[{{{jsEscape this.constant}}}], {{{ this.validator }}})
{{else}}
    && {{{../isOptional}}}(aValue[{{{jsEscape this.constant}}}], {{{ this.validator }}})
{{/if}}
{{/if}}
{{/if}}
{{/each}}
    ;
{{else}}
    return {{{isNotNil}}}(!!aValue);
{{/if}}
}
{{#each bindings}}

/**
 * Selects the {@link {{{this.constant}~}} } property from {@link {{{../definitionName}~}} }.
 *
 * @param aDefault - optional default
 *
 * @returns the selector function
 */
export const {{{this.selectMethod}}}: (aDefault?: {{{this.type}}}) => UnaryFunction<{{{../definitionName}}},
  {{{this.type}}}> = partialLeft(pluckProperty, {{{this.constant}}});

/**
 * Selects the {@link {{{this.constant}~}} } property from {@link {{{../definitionName}~}} } as an operator.
 *
 * @param aDefault - optional default
 * @param aCmp - optional comparator to compare the results
 *
 * @returns the selector operator
 */
export const {{{this.rxSelectMethod}}}: (aDefault?: {{{this.type}}}, aCmp?: EqualsPredicate<{{{this.type}}}>) =>
  OperatorFunction<{{{../definitionName}}}, {{{this.type}}}> = partialLeft(rxSelectProperty, {{{this.constant}}});
    {{/each}}
